stat_summary(fun.data = "mean_cl_boot", size = 1.3) +
facet_wrap(vars(Story), scales = "free") +
scale_y_continuous(breaks = c(1:7),
labels = c("1","2","3","4","5","6","7"),
minor_breaks = NULL) +
# TODO: Change x-tick labels to actual t levels (need to look up how to do this)
scale_x_continuous(minor_breaks = NULL) +
scale_color_d3() +
theme(legend.position = "bottom") +
labs(
x = "t"
)
```
```{r}
# Split data into the three separate stories
cake_data <- expt_data %>% filter(Story == "cake")
movie_data <- expt_data %>% filter(Story == "movie")
podcast_data <- expt_data %>% filter(Story == "podcast")
# Fit a linear model for each story to the ratings
lm_cake <- lm(formula = Rating ~ TVal, data = cake_data)
lm_movie <- lm(formula = Rating ~ TVal, data = movie_data)
lm_podcast <- lm(formula = Rating ~ TVal, data = podcast_data)
# Create data frames with inferred (predicted) ratings for all
# t values
# Note, you can change the values for which these data frames
# generate predicted values by changing the range of TVal
# in the call to 'expand_grid'
inferred_cake_ratings <- expand_grid(TVal = 1:120)
inferred_cake_ratings <- inferred_cake_ratings %>%
mutate(predicted_rating = predict(lm_cake, inferred_cake_ratings))
inferred_movie_ratings <- expand_grid(TVal = 1:180)
inferred_movie_ratings <- inferred_movie_ratings %>%
mutate(predicted_rating = predict(lm_movie, inferred_movie_ratings))
inferred_podcast_ratings <- expand_grid(TVal = 1:250)
inferred_podcast_ratings <- inferred_podcast_ratings %>%
mutate(predicted_rating = predict(lm_podcast, inferred_podcast_ratings))
```
Export ratings as CSV files
```{r}
write.csv(inferred_cake_ratings, file="interpolatedCakeRatings.csv", row.names = FALSE)
write.csv(inferred_podcast_ratings, file="interpolatedPodcastRatings.csv", row.names = FALSE)
write.csv(inferred_movie_ratings, file="interpolatedMovieRatings.csv", row.names = FALSE)
```
---
title: "Experiment 1 analysis"
author: "Alan Jern and Stephen Payne"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r}
library(tidyverse)
library(lme4)
library(afex)
library(here)
```
```{r}
expt_data <- read_csv("../../Results/Rater/Tidy/rater-tidy-experiment-12-09-21.csv") %>%
mutate(Context = as_factor(Context)) %>%
mutate(Subject = as.character(Subject)) %>%
mutate(Context = recode(Context,
"1" = "relevant",
"2" = "non-relevant"))
```
```{r}
m <- lmer(formula = Rating ~ 1 + Context * Level +
(1|Story) +
(1 + Level|Subject),
data = expt_data)
summary(m)
```
## Interpreting results
The main things we're interested in here:
* Main effect of level: This shows the effect of level when context is social
* Interaction: We expect a sig. interaction here. Specifically, we expect a negative interaction, which would mean that the slope of the level variable would be adjusted down when context is non-relevant. This makes sense because we assume basically a horizontal line for ratings across levels for non-relevant context, but a roughly increasing line for ratings across levels for relevant context.
```{r}
library(Hmisc)
library(ggsci)
set.seed(123)
ggplot(data = expt_data,
aes(x = TVal, color = Context, y = Rating)) +
geom_jitter(aes(y = Rating),
alpha = 0.4,
width = 2) +
stat_summary(fun.data = "mean_cl_boot", size = 1.3) +
facet_wrap(vars(Story), scales = "free") +
scale_y_continuous(breaks = c(1:7),
labels = c("1","2","3","4","5","6","7"),
minor_breaks = NULL) +
# TODO: Change x-tick labels to actual t levels (need to look up how to do this)
scale_x_continuous(minor_breaks = NULL) +
scale_color_d3() +
theme(legend.position = "bottom") +
labs(
x = "t"
)
```
```{r}
# Split data into the three separate stories
cake_data <- expt_data %>% filter(Story == "cake")
movie_data <- expt_data %>% filter(Story == "movie")
podcast_data <- expt_data %>% filter(Story == "podcast")
# Fit a linear model for each story to the ratings
lm_cake <- lm(formula = Rating ~ TVal, data = cake_data)
lm_movie <- lm(formula = Rating ~ TVal, data = movie_data)
lm_podcast <- lm(formula = Rating ~ TVal, data = podcast_data)
# Create data frames with inferred (predicted) ratings for all
# t values
# Note, you can change the values for which these data frames
# generate predicted values by changing the range of TVal
# in the call to 'expand_grid'
inferred_cake_ratings <- expand_grid(TVal = 1:120)
inferred_cake_ratings <- inferred_cake_ratings %>%
mutate(predicted_rating = predict(lm_cake, inferred_cake_ratings))
inferred_movie_ratings <- expand_grid(TVal = 1:180)
inferred_movie_ratings <- inferred_movie_ratings %>%
mutate(predicted_rating = predict(lm_movie, inferred_movie_ratings))
inferred_podcast_ratings <- expand_grid(TVal = 1:250)
inferred_podcast_ratings <- inferred_podcast_ratings %>%
mutate(predicted_rating = predict(lm_podcast, inferred_podcast_ratings))
```
Export ratings as CSV files
```{r}
write.csv(inferred_cake_ratings, file="interpolatedCakeRatings.csv", row.names = FALSE)
write.csv(inferred_podcast_ratings, file="interpolatedPodcastRatings.csv", row.names = FALSE)
write.csv(inferred_movie_ratings, file="interpolatedMovieRatings.csv", row.names = FALSE)
```
library(dplyr)
library(stringr)
library(patchwork)
library(ggfx)
story = "podcast"
plotStory <- function(story){
nonSocialPredictons <- read.csv(paste("../../GeneratedPredictions/NonSocial/",story,"Predictions.csv", sep = ""))
library(ggplot2)
df <- read.csv("../../Results/Social-NonSocial/Tidy/filtered-tidy-data.csv")
dfGrouped <- df %>% group_by(Level, Story, Context, T_val) %>% filter(Story == .env$story)
socialGroup <- dfGrouped %>% summarise(avg = mean(Prediction))
plt <- ggplot(nonSocialPredictons, aes(x=t, y=pred)) + geom_line(size=1.5, color="black")
plt <- plt+ geom_jitter(dfGrouped, mapping=aes(x=T_val, y=Prediction, color=Context),size=2,alpha=0.4, width=1.2, height=3)
plt <- plt + with_shadow(stat_summary(dfGrouped, mapping=aes(x=T_val, y=Prediction, color=Context), size=2, fun.data = "mean_cl_boot"), sigma = 3, x_offset = 2, y_offset = 2)
plt <- plt + scale_color_manual(values = c("darkorange", "dodgerblue"))+ xlab('t') +ggtitle(str_to_title(story)) + scale_x_continuous(breaks=socialGroup$T_val)
plt <- plt + ylab('Prediction') + theme(plot.title = element_text(hjust = 0.5))
plt <- plt + theme(
axis.title = element_text(size=14),
axis.text = element_text(size=20),
plot.title = element_text(size=25, hjust = 0.5)
) + ggtitle(str_to_title(story)) + xlab('t')
if(story != "podcast") plt <- plt + theme(legend.position = "none")
if(story != "cake") plt <- plt + ylab("")
return(plt)
}
cakePlt = 0
moviePlt = 0
podcastPlt = 0
for(i in c("cake","movie","podcast")){
storyPlot = plotStory(i)
if(i == "cake") cakePlt = storyPlot
if(i == "movie") moviePlt = storyPlot
if(i == "podcast") podcastPlt = storyPlot
}
cakePlt + moviePlt + podcastPlt
setwd("~/Research-REPO/social-prediction/Research-Attempt-2/Analysis/NonSocial-Social")
library(dplyr)
library(stringr)
library(patchwork)
library(ggfx)
story = "podcast"
plotStory <- function(story){
nonSocialPredictons <- read.csv(paste("../../GeneratedPredictions/NonSocial/",story,"Predictions.csv", sep = ""))
library(ggplot2)
df <- read.csv("../../Results/Social-NonSocial/Tidy/filtered-tidy-data.csv")
dfGrouped <- df %>% group_by(Level, Story, Context, T_val) %>% filter(Story == .env$story)
socialGroup <- dfGrouped %>% summarise(avg = mean(Prediction))
plt <- ggplot(nonSocialPredictons, aes(x=t, y=pred)) + geom_line(size=1.5, color="black")
plt <- plt+ geom_jitter(dfGrouped, mapping=aes(x=T_val, y=Prediction, color=Context),size=2,alpha=0.4, width=1.2, height=3)
plt <- plt + with_shadow(stat_summary(dfGrouped, mapping=aes(x=T_val, y=Prediction, color=Context), size=2, fun.data = "mean_cl_boot"), sigma = 3, x_offset = 2, y_offset = 2)
plt <- plt + scale_color_manual(values = c("darkorange", "dodgerblue"))+ xlab('t') +ggtitle(str_to_title(story)) + scale_x_continuous(breaks=socialGroup$T_val)
plt <- plt + ylab('Prediction') + theme(plot.title = element_text(hjust = 0.5))
plt <- plt + theme(
axis.title = element_text(size=14),
axis.text = element_text(size=20),
plot.title = element_text(size=25, hjust = 0.5)
) + ggtitle(str_to_title(story)) + xlab('t')
if(story != "podcast") plt <- plt + theme(legend.position = "none")
if(story != "cake") plt <- plt + ylab("")
return(plt)
}
cakePlt = 0
moviePlt = 0
podcastPlt = 0
for(i in c("cake","movie","podcast")){
storyPlot = plotStory(i)
if(i == "cake") cakePlt = storyPlot
if(i == "movie") moviePlt = storyPlot
if(i == "podcast") podcastPlt = storyPlot
}
cakePlt + moviePlt + podcastPlt
library(dplyr)
library(stringr)
library(patchwork)
library(ggfx)
plotStory <- function(story){
nonSocialPredictons <- read.csv(paste("../../GeneratedPredictions/NonSocial/",story,"Predictions.csv", sep = ""))
library(ggplot2)
df <- read.csv("../../Results/Social-NonSocial/Tidy/filtered-tidy-data.csv")
dfGrouped <- df %>% group_by(Level, Story, Context, T_val) %>% filter(Story == .env$story)
socialGroup <- dfGrouped %>% summarise(avg = mean(Prediction))
plt <- ggplot(nonSocialPredictons, aes(x=t, y=pred)) + geom_line(size=1.5, color="black")
plt <- plt+ geom_jitter(dfGrouped, mapping=aes(x=T_val, y=Prediction, color=Context),size=2,alpha=0.4, width=1.2, height=3)
plt <- plt + with_shadow(stat_summary(dfGrouped, mapping=aes(x=T_val, y=Prediction, color=Context), size=2, fun.data = "mean_cl_boot"), sigma = 3, x_offset = 2, y_offset = 2)
plt <- plt + scale_color_manual(values = c("darkorange", "dodgerblue"))+ xlab('t') +ggtitle(str_to_title(story)) + scale_x_continuous(breaks=socialGroup$T_val)
plt <- plt + ylab('Prediction') + theme(plot.title = element_text(hjust = 0.5))
plt <- plt + theme(
axis.title = element_text(size=14),
axis.text = element_text(size=20),
plot.title = element_text(size=25, hjust = 0.5)
) + ggtitle(str_to_title(story)) + xlab('t')
if(story != "podcast") plt <- plt + theme(legend.position = "none")
if(story != "cake") plt <- plt + ylab("")
return(plt)
}
cakePlt = 0
moviePlt = 0
podcastPlt = 0
for(i in c("cake","movie","podcast")){
storyPlot = plotStory(i)
if(i == "cake") cakePlt = storyPlot
if(i == "movie") moviePlt = storyPlot
if(i == "podcast") podcastPlt = storyPlot
}
cakePlt + moviePlt + podcastPlt
library(dplyr)
library(stringr)
library(patchwork)
library(ggfx)
plotStory <- function(story){
nonSocialPredictons <- read.csv(paste("../../GeneratedPredictions/NonSocial/",story,"Predictions.csv", sep = ""))
library(ggplot2)
df <- read.csv("../../Results/Social-NonSocial/Tidy/filtered-tidy-data.csv")
dfGrouped <- df %>% group_by(Level, Story, Context, T_val) %>% filter(Story == .env$story)
socialGroup <- dfGrouped %>% summarise(avg = mean(Prediction))
plt <- ggplot(nonSocialPredictons, aes(x=t, y=pred)) + geom_line(size=1.5, color="black")
plt <- plt+ geom_jitter(dfGrouped, mapping=aes(x=T_val, y=Prediction, color=Context),size=2,alpha=0.4, width=1.2, height=3)
plt <- plt + with_shadow(stat_summary(dfGrouped, mapping=aes(x=T_val, y=Prediction, color=Context), size=2, fun.data = "mean_cl_boot"), sigma = 3, x_offset = 2, y_offset = 2)
plt <- plt + scale_color_manual(values = c("darkorange", "dodgerblue"))+ xlab('t') +ggtitle(str_to_title(story)) + scale_x_continuous(breaks=socialGroup$T_val)
plt <- plt + ylab('Prediction') + theme(plot.title = element_text(hjust = 0.5))
plt <- plt + theme(
axis.title = element_text(size=14),
axis.text = element_text(size=20),
plot.title = element_text(size=25, hjust = 0.5)
) + ggtitle(str_to_title(story)) + xlab('t')
if(story != "podcast") plt <- plt + theme(legend.position = "none")
if(story != "cake") plt <- plt + ylab("")
return(plt)
}
cakePlt = 0
moviePlt = 0
podcastPlt = 0
for(i in c("cake","movie","podcast")){
storyPlot = plotStory(i)
if(i == "cake") cakePlt = storyPlot
if(i == "movie") moviePlt = storyPlot
if(i == "podcast") podcastPlt = storyPlot
}
cakePlt + moviePlt + podcastPlt
setwd("~/Research-REPO/social-prediction/Research-Attempt-2/Results/Social-NonSocial")
library(dplyr)
library(stringr)
## CHANGE THIS VARIABLE TO FILTER RESULTS FOR EACH STORY ##
## Can set to: "cake", "movie", or "podcast"
story = "movie"
socialDf <- read.csv("./Tidy/social-tidy-experiment-1-16-22.csv")
nonSocialDf <- read.csv("./Tidy/nonsocial-tidy-experiment-1-16-22.csv")
nonSocialPredictons <- read.csv(paste("../../GeneratedPredictions/NonSocial/",story,"Predictions.csv", sep = ""))
socialGroup <- socialDf %>%
group_by(Level, Story, Context, T_val) %>% summarise(avg = mean(Prediction))
nonSocialGroup <- nonSocialDf %>%
group_by(Level, Story, Context, T_val) %>% summarise(avg = mean(Prediction))
library(ggplot2)
socialGroup <- socialGroup %>% filter(Story == .env$story)
nonSocialGroup <- nonSocialGroup %>% filter(Story == .env$story)
df <- rbind(socialDf,nonSocialDf)
dfGrouped <- df %>%
group_by(Level, Story, Context, T_val)
dfZ <- dfGrouped %>% mutate(z_score = abs((Prediction - mean(Prediction))/sd(Prediction)))
dfFiltered <- dfZ %>% filter(z_score <= 3)
outliers <- dfZ %>% filter(z_score > 3)
write.csv(dfFiltered, file="./Tidy/filtered2-tidy-data.csv", row.names = FALSE)
write.csv(outliers , file="outliers.csv", row.names=FALSE)
library(dplyr)
library(stringr)
## CHANGE THIS VARIABLE TO FILTER RESULTS FOR EACH STORY ##
## Can set to: "cake", "movie", or "podcast"
story = "movie"
socialDf <- read.csv("./Tidy/Social/social-tidy-experiment-1-16-22.csv")
nonSocialDf <- read.csv("./Tidy/Non-Social/nonsocial-tidy-experiment-1-16-22.csv")
nonSocialPredictons <- read.csv(paste("../../GeneratedPredictions/NonSocial/",story,"Predictions.csv", sep = ""))
socialGroup <- socialDf %>%
group_by(Level, Story, Context, T_val) %>% summarise(avg = mean(Prediction))
nonSocialGroup <- nonSocialDf %>%
group_by(Level, Story, Context, T_val) %>% summarise(avg = mean(Prediction))
library(ggplot2)
socialGroup <- socialGroup %>% filter(Story == .env$story)
nonSocialGroup <- nonSocialGroup %>% filter(Story == .env$story)
df <- rbind(socialDf,nonSocialDf)
dfGrouped <- df %>%
group_by(Level, Story, Context, T_val)
dfZ <- dfGrouped %>% mutate(z_score = abs((Prediction - mean(Prediction))/sd(Prediction)))
dfFiltered <- dfZ %>% filter(z_score <= 3)
outliers <- dfZ %>% filter(z_score > 3)
write.csv(dfFiltered, file="./Tidy/filtered2-tidy-data.csv", row.names = FALSE)
write.csv(outliers , file="outliers.csv", row.names=FALSE)
library(dplyr)
library(stringr)
## CHANGE THIS VARIABLE TO FILTER RESULTS FOR EACH STORY ##
## Can set to: "cake", "movie", or "podcast"
story = "movie"
socialDf <- read.csv("./Tidy/Social/social-tidy-experiment-1-16-22.csv")
nonSocialDf <- read.csv("./Tidy/Non-Social/nonsocial-tidy-experiment-1-16-22.csv")
nonSocialPredictons <- read.csv(paste("../../GeneratedPredictions/NonSocial/",story,"Predictions.csv", sep = ""))
socialGroup <- socialDf %>%
group_by(Level, Story, Context, T_val) %>% summarise(avg = mean(Prediction))
nonSocialGroup <- nonSocialDf %>%
group_by(Level, Story, Context, T_val) %>% summarise(avg = mean(Prediction))
library(ggplot2)
socialGroup <- socialGroup %>% filter(Story == .env$story)
nonSocialGroup <- nonSocialGroup %>% filter(Story == .env$story)
library(dplyr)
library(stringr)
socialDf <- read.csv("./Tidy/Social/social-tidy-experiment-1-16-22.csv")
nonSocialDf <- read.csv("./Tidy/Non-Social/nonsocial-tidy-experiment-1-16-22.csv")
df <- rbind(socialDf,nonSocialDf)
dfGrouped <- df %>%
group_by(Level, Story, Context, T_val)
dfZ <- dfGrouped %>% mutate(z_score = abs((Prediction - mean(Prediction))/sd(Prediction)))
dfFiltered <- dfZ %>% filter(z_score <= 3)
outliers <- dfZ %>% filter(z_score > 3)
write.csv(dfFiltered, file="./Tidy/filtered-tidy-data.csv", row.names = FALSE)
write.csv(outliers , file="outliers.csv", row.names=FALSE)
---
title: "Experiment 1 analysis"
author: "Alan Jern and Stephen Payne"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r}
library(tidyverse)
library(lme4)
library(afex)
library(here)
```
```{r}
expt_data <- read_csv("../Results/Rater/Tidy/rater-tidy-experiment-12-09-21.csv") %>%
mutate(Context = as_factor(Context)) %>%
mutate(Subject = as.character(Subject)) %>%
mutate(Context = recode(Context,
"1" = "relevant",
"2" = "non-relevant"))
```
```{r}
m <- lmer(formula = Rating ~ 1 + Context * Level +
(1|Story) +
(1 + Level|Subject),
data = expt_data)
summary(m)
```
## Interpreting results
The main things we're interested in here:
* Main effect of level: This shows the effect of level when context is social
* Interaction: We expect a sig. interaction here. Specifically, we expect a negative interaction, which would mean that the slope of the level variable would be adjusted down when context is non-relevant. This makes sense because we assume basically a horizontal line for ratings across levels for non-relevant context, but a roughly increasing line for ratings across levels for relevant context.
```{r}
library(Hmisc)
library(ggsci)
set.seed(123)
ggplot(data = expt_data,
aes(x = TVal, color = Context, y = Rating)) +
geom_jitter(aes(y = Rating),
alpha = 0.4,
width = 2) +
stat_summary(fun.data = "mean_cl_boot", size = 1.3) +
facet_wrap(vars(Story), scales = "free") +
scale_y_continuous(breaks = c(1:7),
labels = c("1","2","3","4","5","6","7"),
minor_breaks = NULL) +
# TODO: Change x-tick labels to actual t levels (need to look up how to do this)
scale_x_continuous(minor_breaks = NULL) +
scale_color_d3() +
theme(legend.position = "bottom") +
labs(
x = "t"
)
```
```{r}
# Split data into the three separate stories
cake_data <- expt_data %>% filter(Story == "cake")
movie_data <- expt_data %>% filter(Story == "movie")
podcast_data <- expt_data %>% filter(Story == "podcast")
# Fit a linear model for each story to the ratings
lm_cake <- lm(formula = Rating ~ TVal, data = cake_data)
lm_movie <- lm(formula = Rating ~ TVal, data = movie_data)
lm_podcast <- lm(formula = Rating ~ TVal, data = podcast_data)
# Create data frames with inferred (predicted) ratings for all
# t values
# Note, you can change the values for which these data frames
# generate predicted values by changing the range of TVal
# in the call to 'expand_grid'
inferred_cake_ratings <- expand_grid(TVal = 1:120)
inferred_cake_ratings <- inferred_cake_ratings %>%
mutate(predicted_rating = predict(lm_cake, inferred_cake_ratings))
inferred_movie_ratings <- expand_grid(TVal = 1:180)
inferred_movie_ratings <- inferred_movie_ratings %>%
mutate(predicted_rating = predict(lm_movie, inferred_movie_ratings))
inferred_podcast_ratings <- expand_grid(TVal = 1:250)
inferred_podcast_ratings <- inferred_podcast_ratings %>%
mutate(predicted_rating = predict(lm_podcast, inferred_podcast_ratings))
```
Export ratings as CSV files
```{r}
write.csv(inferred_cake_ratings, file="./interpolatedContextRatings/interpolatedCakeRatings.csv", row.names = FALSE)
write.csv(inferred_podcast_ratings, file="./interpolatedContextRatings/interpolatedPodcastRatings.csv", row.names = FALSE)
write.csv(inferred_movie_ratings, file="./interpolatedContextRatings/interpolatedMovieRatings.csv", row.names = FALSE)
```
setwd("~/Research-REPO/social-prediction/Research-Attempt-2/Analysis")
---
title: "Experiment 1 analysis"
author: "Alan Jern and Stephen Payne"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r}
library(tidyverse)
library(lme4)
library(afex)
library(here)
```
```{r}
expt_data <- read_csv("../Results/Rater/Tidy/rater-tidy-experiment-12-09-21.csv") %>%
mutate(Context = as_factor(Context)) %>%
mutate(Subject = as.character(Subject)) %>%
mutate(Context = recode(Context,
"1" = "relevant",
"2" = "non-relevant"))
```
```{r}
m <- lmer(formula = Rating ~ 1 + Context * Level +
(1|Story) +
(1 + Level|Subject),
data = expt_data)
summary(m)
```
## Interpreting results
The main things we're interested in here:
* Main effect of level: This shows the effect of level when context is social
* Interaction: We expect a sig. interaction here. Specifically, we expect a negative interaction, which would mean that the slope of the level variable would be adjusted down when context is non-relevant. This makes sense because we assume basically a horizontal line for ratings across levels for non-relevant context, but a roughly increasing line for ratings across levels for relevant context.
```{r}
library(Hmisc)
library(ggsci)
set.seed(123)
ggplot(data = expt_data,
aes(x = TVal, color = Context, y = Rating)) +
geom_jitter(aes(y = Rating),
alpha = 0.4,
width = 2) +
stat_summary(fun.data = "mean_cl_boot", size = 1.3) +
facet_wrap(vars(Story), scales = "free") +
scale_y_continuous(breaks = c(1:7),
labels = c("1","2","3","4","5","6","7"),
minor_breaks = NULL) +
# TODO: Change x-tick labels to actual t levels (need to look up how to do this)
scale_x_continuous(minor_breaks = NULL) +
scale_color_d3() +
theme(legend.position = "bottom") +
labs(
x = "t"
)
```
```{r}
# Split data into the three separate stories
cake_data <- expt_data %>% filter(Story == "cake")
movie_data <- expt_data %>% filter(Story == "movie")
podcast_data <- expt_data %>% filter(Story == "podcast")
# Fit a linear model for each story to the ratings
lm_cake <- lm(formula = Rating ~ TVal, data = cake_data)
lm_movie <- lm(formula = Rating ~ TVal, data = movie_data)
lm_podcast <- lm(formula = Rating ~ TVal, data = podcast_data)
# Create data frames with inferred (predicted) ratings for all
# t values
# Note, you can change the values for which these data frames
# generate predicted values by changing the range of TVal
# in the call to 'expand_grid'
inferred_cake_ratings <- expand_grid(TVal = 1:120)
inferred_cake_ratings <- inferred_cake_ratings %>%
mutate(predicted_rating = predict(lm_cake, inferred_cake_ratings))
inferred_movie_ratings <- expand_grid(TVal = 1:180)
inferred_movie_ratings <- inferred_movie_ratings %>%
mutate(predicted_rating = predict(lm_movie, inferred_movie_ratings))
inferred_podcast_ratings <- expand_grid(TVal = 1:250)
inferred_podcast_ratings <- inferred_podcast_ratings %>%
mutate(predicted_rating = predict(lm_podcast, inferred_podcast_ratings))
```
Export ratings as CSV files
```{r}
write.csv(inferred_cake_ratings, file="./interpolatedContextRatings/interpolatedCakeRatings.csv", row.names = FALSE)
write.csv(inferred_podcast_ratings, file="./interpolatedContextRatings/interpolatedPodcastRatings.csv", row.names = FALSE)
write.csv(inferred_movie_ratings, file="./interpolatedContextRatings/interpolatedMovieRatings.csv", row.names = FALSE)
```
